# Adapted by Thibault PIANA & Alan Gardin
# Creation : 20/10/2015
# Defining the cross compiler tool prefix

# Configure
C_MODE = debug

# Configure toolchain
PREFIX=arm-none-eabi

STD_LIB_FORMAT = STANDARD

# Compiler, Linker and Archiver with respect to the toolchain
CC=${PREFIX}-gcc
CPP=${PREFIX}-g++
LD=${PREFIX}-ld
AR=${PREFIX}-ar
AS=${PREFIX}-as
BIN=$(PREFIX)-objcopy

# Source code paths
BOOT_SRC=${ROOT}/boot
ARCH_SRC=${ROOT}/arch
DRIVER_SRC=${ROOT}/drivers
KERNEL_SRC=${ROOT}/kernel
HAL_SRC=${ARCH_SRC}/arm/hal
SYSCALLS_SRC=${ROOT}/syscalls

BIN_SRC=${ROOT}/bin/${C_MODE}
BIN_LIBS_SRC=${BIN_SRC}/libs

# Files paths
LINKER_PATH = ${ROOT}/build/linker.ld

# Include paths
IPATH=-I ${ROOT}/include/arch/arm \
      -I ${ROOT}/include/arch/arm/hal/hw \
      -I ${ROOT}/include \
      -I ${ROOT}/include/syscalls

LPATH =

# Flags
CCFLAGS = -Wall ${IPATH} -nostdlib -nostartfiles -ffreestanding -mcpu=cortex-a8 -march=armv7-a #-pedantic -ansi -Wextra

#|------------|--------------------------------------------|--------------|
#| Cortex-A*  | [-mthumb] -march=armv7-a                   | armv7-ar     |
#| (No FP)    |                                            | /thumb       |
#|------------|--------------------------------------------|--------------|
#| Cortex-A*  | [-mthumb] -march=armv7-a -mfloat-abi=softfp| armv7-ar     |
#| (Soft FP)  | -mfpu=vfpv3-d16                            | /thumb       |
#|            |                                            | /softfp      |
#|------------|--------------------------------------------|--------------|
#| Cortex-A*  | [-mthumb] -march=armv7-a -mfloat-abi=hard  | armv7-ar     |
#| (Hard FP)  | -mfpu=vfpv3-d16                            | /thumb       |
#|            |                                            | /fpu
#|------------|--------------------------------------------|--------------|


ASFLAGS = --warn -mcpu=cortex-a8
LDFLAGS = ${LPATH}

# Includes
ifeq (${STD_LIB_FORMAT}, STANDARD) # If we use newlib standard
    INCLUDE_STD_LIB_C = -L${ROOT}/syscalls/standard -L${ROOT}/syscalls -lc -lg -lm -lgcc
    INCLUDE_STD_LIB_CPP = -L${ROOT}/syscalls/standard -L${ROOT}/syscalls -lstdc++ -lsupc++ -lm -lgcc
else # If we use newlib nano
    INCLUDE_STD_LIB_C = -L${ROOT}/syscalls/nano -L${ROOT}/syscalls -lc_nano -lg_nano -lm -lgcc
    INCLUDE_STD_LIB_CPP = -L${ROOT}/syscalls/nano -L${ROOT}/syscalls -lstdc++_nano -lsupc++_nano -lm -lgcc
endif