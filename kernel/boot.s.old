.text
.section ".text.boot"
.global _start
.global error
.arm	// Arm mode

// Stack sizes definition
.equ UND_STACK_SIZE, 0x8
.equ SVC_STACK_SIZE, 0x32
.equ ABT_STACK_SIZE, 0x8
.equ IRQ_STACK_SIZE, 0x8
.equ FIQ_STACK_SIZE, 0x8
.equ SYS_STACK_SIZE, 0x1000

// Processor modes definitions
.equ MODE_USR, 0x10
.equ MODE_FIQ, 0x11
.equ MODE_IRQ, 0x12
.equ MODE_SVC, 0x13
.equ MODE_ABT, 0x17
.equ MODE_UND, 0x1B
.equ MODE_SYS, 0x1F

.equ I_bit, 0xc0


_start:
    stack_init:
	ldr r0, =_estack
        msr cpsr_c, #MODE_UND | I_bit
        mov sp, r0
	sub r0, r0, #UND_STACK_SIZE

	msr cpsr_c, #MODE_SVC | I_bit
        mov sp, r0
	sub r0, r0, #SVC_STACK_SIZE

        msr cpsr_c, #MODE_ABT | I_bit
        mov sp, r0
	sub r0, r0, #ABT_STACK_SIZE

        msr cpsr_c, #MODE_IRQ | I_bit
        mov sp, r0
	sub r0, r0, #IRQ_STACK_SIZE

        msr cpsr_c, #MODE_FIQ | I_bit
        mov sp, r0
	sub r0, r0, #FIQ_STACK_SIZE

        // Kernel mode
        msr cpsr_c, #MODE_SYS | I_bit
        mov sp, r0

    bss_init:
        ldr	r0, =_sbss
        ldr	r1, =_ebss
        cmp r0,r1

        beq call_main
        mov	r4, #0

        write_zero:
            strb r4, [r0]
            add r0,r0,#1
            cmp	r0, r1
            bne	write_zero

    // Arguments not defined
    call_main:
        b	kmain


error:
	mov r0, #1
	b kexit

halt:
	// TODO: Remove interrupts
	mov r0, #0 // No error
    b	kexit
